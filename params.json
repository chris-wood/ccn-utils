{"name":"ccn-utils","tagline":"","body":"# ccn-tools\r\n\r\nThis page describes the tools I have built as part of my research and development \r\nfor CCN. These tools have aided me in my research to perform tasks such as \r\npacket generation and inspection, topology management, and forwarder testing\r\nand development. The following list briefly describes each of the tools and their\r\nrespective use in the suite. \r\n\r\n* [pktgen](https://github.com/chris-wood/ccnx-pktgen): This is a tool to generate\r\nCCNx packets (e.g., interests and content objects) for use in testing forwarders.\r\nThe goal is to enable packets to be (deterministically and) programmatically \r\ngenerated using simple functional semantics to allow for repeatable experimentation.\r\nMoreover, when used in forwarder test environments (see below), it generates \r\npacket pairs (interests and matching content objects) to emulate real traffic.\r\n* [flux](https://github.com/chris-wood/flux): This is a domain-specific language\r\nfor procedurally specifying the packet flow of an application. It is used to let\r\napplication traffic patterns be codified in a high-level language. The goal is to\r\nallow application behavior with the network to be assessed without dealing with any\r\nof the application-layer concerns. In a sense, this is done by mocking application logic.\r\n* [topogen](https://github.com/chris-wood/ccnx-topogen): This is a tool to convert CCN \r\napplication and network topologies expressed as DOT graphs to forwarder configuration \r\nfiles to replicate the actual scenario. This is used to run real forwarders on real\r\nhardware transferring real packets -- it is not for simulation purposes.\r\n* [pktpusher](https://github.com/chris-wood/ccnx-fwdharness): This is a tool used\r\nto test forwarders. It consists of two programs -- a sender (consumer) and a \r\nreceiver (producer) -- that interact by sending interests and the respective content\r\nobjects. The preliminary version uses primitive techniques to control the flow\r\nof interests from the sender. A future plan is to extend the sender program to \r\nparse \"executable packet flows\" that are generated by flux to better capture \r\napplication-specific packet flows (as opposed to \"brute force\" send and receive).\r\nThe receiver implements a basic content-addressable repository (hash table) that\r\nis used to serve content to the sender in response to an interest.\r\n* [dissect](https://github.com/chris-wood/dissect): This is a tool to inspect CCN\r\npackets in raw form. It also features the ability to export packets to alternative\r\nencodings if necessary, e.g., JSON. It is written in C to enable portability\r\nand re-use across other projects. \r\n* [essayons](https://github.com/chris-wood/essayons): This is an experimentation tool that\r\nuses forwarder configurations to create a topology on real systems, run an experiment, \r\nand collect output data about the experiment. \r\n\r\n","google":"UA-73489405-1","note":"Don't delete this file! It's used internally to help with page regeneration."}